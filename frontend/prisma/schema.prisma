generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  HSRScannerTemplate HSRScannerTemplate[]
  likedTemplates     ProfileLikeTemplate[]
}

model HSRScannerVersion {
  id          String  @id @default(uuid())
  version     String  @unique
  downloadUrl String  @unique @db.Text
  isLatest    Boolean @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model HSRScannerUpdateLog {
  id      String @id @default(uuid())
  version String @unique
  log     String @db.Text

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model HSRScannerTemplate {
  id    String @id @default(uuid())
  title String
  desc  String
  code  String @db.Text
  likes Int    @default(0)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  likedBy ProfileLikeTemplate[]

  @@index([profileId])
}

model ProfileLikeTemplate {
  id         String @id @default(uuid())
  profileId  String
  templateId String

  profile  Profile            @relation(fields: [profileId], references: [id])
  template HSRScannerTemplate @relation(fields: [templateId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@unique([profileId, templateId])
  @@index([profileId])
  @@index([templateId])
}
